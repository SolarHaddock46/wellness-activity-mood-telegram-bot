import asyncio
import logging
import pandas as pd
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup,
                           InlineKeyboardButton, Message, ReplyKeyboardRemove, BotCommand)
import aiosqlite
from dotenv import load_dotenv
import os
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from typing import Any, Awaitable, Callable, Dict
from gigachat import GigaChat
from langchain.llms import GigaChat as LangChainGigaChat
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = os.getenv('API_TOKEN')
GIGACHAT_CREDENTIALS = os.getenv('GIGACHAT_CREDENTIALS')
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
gigachat = GigaChat(credentials=GIGACHAT_CREDENTIALS, verify_ssl_certs=False)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()


# FSM
class RegistrationForm(StatesGroup):
    name = State()


class SurveyForm(StatesGroup):
    answering = State()


# Middleware
class RegistrationMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—Å–æ–æ–±—â–µ–Ω–∏—è
        if not isinstance(event, Message):
            return await handler(event, data)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not event.text:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        state: FSMContext = data.get("state")
        if state:
            current_state = await state.get_state()
            if current_state == "RegistrationForm:name":
                return await handler(event, data)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if event.text.startswith(('/start', '/register')):
            return await handler(event, data)

        user_id = event.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        async with aiosqlite.connect('users.db') as db:
            async with db.execute(
                    "SELECT name FROM users WHERE user_id = ?",
                    (user_id,)
            ) as cursor:
                user = await cursor.fetchone()

        if not user:
            await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register")
            return

        return await handler(event, data)


class LoggingMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
    ) -> Any:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with aiosqlite.connect('users.db') as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_actions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    action TEXT,
                    content TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            await db.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(event, Message):
            user_id = event.from_user.id
            action = event.text if event.text else 'non-text action'

            async with aiosqlite.connect('users.db') as db:
                await db.execute(
                    "INSERT INTO user_actions (user_id, action, content, timestamp) VALUES (?, ?, ?, ?)",
                    (user_id, action, str(event), datetime.now())
                )
                await db.commit()

            logger.info(f"User {user_id} performed action: {action}")

        return await handler(event, data)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏")],
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
    ],
    resize_keyboard=True
)

rating_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"rate:{i}")
         for i in range(-3, 4, 1)]
    ]
)

async def set_commands():
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="register", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    ]
    await bot.set_my_commands(commands)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
class UserResponse:
    def __init__(self):
        self.current_question = 0
        self.answers = {}

# FSM –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
class FeedbackForm(StatesGroup):
    waiting_for_feedback = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_responses = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
try:
    questions_df = pd.read_csv('questions.csv')
    TOTAL_QUESTIONS = len(questions_df)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
    questions_df = None
    TOTAL_QUESTIONS = 0

# –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
async def create_user_database():
    async with aiosqlite.connect('users.db') as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )"""
        )
        await db.commit()

async def create_feedback_database():
    async with aiosqlite.connect('feedback.db') as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                feedback TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )"""
        )
        await db.commit()

async def init_db():
    async with aiosqlite.connect('survey.db') as db:
        await db.execute(
            '''CREATE TABLE IF NOT EXISTS survey_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                well_being REAL,
                activity REAL,
                mood REAL,
                analysis TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )'''
        )
        await db.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–µ—Ç–æ–¥–∏–∫–∏ –°–ê–ù</b>\n\n"
        "üìù <b>–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å'\n"
        "2. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç -3 –¥–æ +3:\n"
        "   ‚Ä¢ +3: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ\n"
        "   ‚Ä¢ 0: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "   ‚Ä¢ -3: –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üîò <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "  - '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å': –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞\n"
        "  - '–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã': –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–æ—Ä–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∞–º–∏\n"
        "  - '–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏': –∞–Ω–∞–ª–∏–∑ –í–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GigaChat\n\n"
        "üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:\n"
        "  - –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n"
        "  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "–¢–∞–∫–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GigaChat –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∏–º."
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help"
    )
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state == "RegistrationForm:name":
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return

    async with aiosqlite.connect('users.db') as db:
        async with db.execute(
                "SELECT name FROM users WHERE user_id = ?",
                (user_id,)
        ) as cursor:
            user = await cursor.fetchone()

    if user:
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user[0]}!",
            reply_markup=main_menu
        )
    else:
        await state.set_state(RegistrationForm.name)
        await message.answer(
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(StateFilter(RegistrationForm.name))
async def process_name(message: Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if message.text.startswith('/'):
        return

    name = message.text.strip()
    if len(name) < 2 or len(name) > 50:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    user_id = message.from_user.id

    try:
        async with aiosqlite.connect('users.db') as db:
            await db.execute(
                "INSERT INTO users (user_id, name) VALUES (?, ?)",
                (user_id, name)
            )
            await db.commit()

        await state.clear()
        await message.answer(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!",
            reply_markup=main_menu
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id} ({name})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(F.text == "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
async def start_survey(message: Message, state: FSMContext):
    if questions_df is not None:
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞
        guide_text = (
            "üìã <b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
            "‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∫–∞–ª—É –æ—Ç -3 –¥–æ +3\n"
            "‚Ä¢ –ù–µ –¥—É–º–∞–π—Ç–µ –¥–æ–ª–≥–æ –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º\n"
            "‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n\n"
            "<b>–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:</b>\n"
            "+3 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ\n"
            "+2 ‚Äî —Å–∏–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ\n"
            "+1 ‚Äî —Å–ª–∞–±–æ –≤—ã—Ä–∞–∂–µ–Ω–æ\n"
            " 0 ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
            "-1 ‚Äî —Å–ª–∞–±–æ –≤—ã—Ä–∞–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ\n"
            "-2 ‚Äî —Å–∏–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ\n"
            "-3 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ\n\n"
         )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_responses[user_id] = UserResponse()
        await state.set_state(SurveyForm.answering)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await message.answer(guide_text, parse_mode="HTML")
        await send_question(message.chat.id, user_id)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
@dp.message(F.text == "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
async def show_results(message: Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect('survey.db') as db:
            async with db.execute(
                    """SELECT well_being, activity, mood, analysis, timestamp 
                    FROM survey_results 
                    WHERE user_id = ? 
                    ORDER BY timestamp DESC 
                    LIMIT 5""",
                    (user_id,)
            ) as cursor:
                results = await cursor.fetchall()

        if results:
            response = "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
            for well_being, activity, mood, analysis, timestamp in results:
                response += (
                    f"–î–∞—Ç–∞: {timestamp}\n"
                    f"–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {well_being:.1f}\n"
                    f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity:.1f}\n"
                    f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}\n"
                    f"{'=' * 20}\n"
                )
            response += "\n–ù–æ—Ä–º–∞: 5.0-5.5 –±–∞–ª–ª–æ–≤"
            await message.answer(response)
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –°–ê–ù
@dp.message(F.text == "–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏")
async def cmd_analyze_trends(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect('users.db') as db:
        async with db.execute(
                "SELECT name FROM users WHERE user_id = ?",
                (user_id,)
        ) as cursor:
            user = await cursor.fetchone()

    if not user:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register"
        )
        return

    await analyze_trends_with_gigachat(message.chat.id, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ
@dp.callback_query(lambda c: c.data.startswith("rate:"))
async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in user_responses:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return

    rating = int(callback_query.data.split(":")[1])
    user_response = user_responses[user_id]
    current_question = questions_df.iloc[user_response.current_question]
    user_response.answers[current_question['number']] = rating
    user_response.current_question += 1

    await callback_query.answer()

    if user_response.current_question < TOTAL_QUESTIONS:
        await send_question(callback_query.message.chat.id, user_id)
    else:
        await process_results(callback_query.message.chat.id, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
@dp.message(F.text.in_({"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"}))
async def start_feedback(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –ú—ã –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!")
    await state.set_state(FeedbackForm.waiting_for_feedback)

@dp.message(FeedbackForm.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    user_id = message.from_user.id
    feedback_text = message.text

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with aiosqlite.connect('feedback.db') as db:
            await db.execute(
                """CREATE TABLE IF NOT EXISTS feedback (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    feedback TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )"""
            )
            await db.execute(
                "INSERT INTO feedback (user_id, feedback) VALUES (?, ?)",
                (user_id, feedback_text)
            )
            await db.commit()

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
            reply_markup=main_menu
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu
        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞
    await state.clear()

@dp.message()
async def handle_invalid_input(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != FeedbackForm.waiting_for_feedback:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. ü§î",
            reply_markup=main_menu
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_question(chat_id: int, user_id: int):
    user_response = user_responses[user_id]
    if user_response.current_question < TOTAL_QUESTIONS:
        question = questions_df.iloc[user_response.current_question]
        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–æ–ø—Ä–æ—Å {user_response.current_question + 1} –∏–∑ {TOTAL_QUESTIONS}\n\n"
                 f"{question['negative']} –∏–ª–∏ {question['positive']}?",
            reply_markup=rating_keyboard
        )

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
async def analyze_results_with_gigachat(well_being: float, activity: float, mood: float) -> str:
    prompt = PromptTemplate(
        input_variables=["well_being", "activity", "mood"],
        template="""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ—Ü–µ–Ω–∫–µ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –°–ê–ù:

        –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {well_being}
        –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}
                
        –ó–∞–¥–∞—á–∏:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        2. –û–ø—Ä–µ–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        3. –û—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏ –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        4. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É—á–∏—Ç—ã–≤–∞–π:
        - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã
        - –î–∏—Å–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        - –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        1. –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        2. –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏
        3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
        4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        5. –û–±—â–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —á–µ—Ç–∫–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É. **–¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —Å–ª–µ–¥—É–µ—Ç.**
        –ò–∑–±–µ–≥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π –∏ —É—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        –§–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª —ç—Ç—É –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –∂–∏–≤–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –∑–∞–ø–æ–ª–Ω–∏–≤—à–∏–º –∞–Ω–∫–µ—Ç—É, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É –Ω–∞ –í—ã.
        **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ markdown**, –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —ç–º–æ–¥–∑–∏."""
    )

    chain = LLMChain(
        llm=LangChainGigaChat(credentials=GIGACHAT_CREDENTIALS, verify_ssl_certs=False),
        prompt=prompt
    )

    result = await chain.arun({
        "well_being": well_being,
        "activity": activity,
        "mood": mood
    })

    return result

# –†–∞—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def process_results(chat_id: int, user_id: int):
    user_response = user_responses[user_id]

    well_being = sum(user_response.answers[i] for i in range(1, 31) if i in [1, 2, 7, 8, 13, 14, 19, 20, 25, 26])
    activity = sum(user_response.answers[i] for i in range(1, 31) if i in [3, 4, 9, 10, 15, 16, 21, 22, 27, 28])
    mood = sum(user_response.answers[i] for i in range(1, 31) if i in [5, 6, 11, 12, 17, 18, 23, 24, 29, 30])

    well_being = (well_being + 30) / 10
    activity = (activity + 30) / 10
    mood = (mood + 30) / 10

    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        async with aiosqlite.connect('survey.db') as db:
            await db.execute(
                '''INSERT INTO survey_results 
                (user_id, well_being, activity, mood) 
                VALUES (?, ?, ?, ?)''',
                (user_id, well_being, activity, mood)
            )
            await db.commit()

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        try:
            analysis = await analyze_results_with_gigachat(well_being, activity, mood)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è—è –∞–Ω–∞–ª–∏–∑
            async with aiosqlite.connect('survey.db') as db:
                await db.execute(
                    '''UPDATE survey_results 
                    SET analysis = ? 
                    WHERE id = (
                        SELECT id 
                        FROM survey_results 
                        WHERE user_id = ? 
                        AND analysis IS NULL 
                        ORDER BY timestamp DESC 
                        LIMIT 1
                    )''',
                    (analysis, user_id)
                )
                await db.commit()

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            message_text = (f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
                            f"–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {well_being:.1f}\n"
                            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity:.1f}\n"
                            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}\n\n"
                            f"–ù–æ—Ä–º–∞: 5.0-5.5 –±–∞–ª–ª–æ–≤\n\n"
                            f"–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n{analysis}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            message_text = (f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
                            f"–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {well_being:.1f}\n"
                            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity:.1f}\n"
                            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}\n\n"
                            f"–ù–æ—Ä–º–∞: 5.0-5.5 –±–∞–ª–ª–æ–≤")

        await bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=main_menu
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu
        )
    finally:
        del user_responses[user_id]

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
async def analyze_trends_with_gigachat(chat_id: int, user_id: int, num_last_results: int = 5) -> None:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î
        async with aiosqlite.connect('survey.db') as db:
            async with db.execute(
                '''SELECT well_being, activity, mood, timestamp 
                FROM survey_results 
                WHERE user_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?''',
                (user_id, num_last_results)
            ) as cursor:
                results = await cursor.fetchall()

        if not results:
            await bot.send_message(
                chat_id=chat_id,
                text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π."
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        formatted_data = []
        for well_being, activity, mood, timestamp in results:
            formatted_data.append(
                f"–î–∞—Ç–∞: {timestamp}\n"
                f"–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {well_being:.1f}\n"
                f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity:.1f}\n"
                f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}\n"
            )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
        prompt = PromptTemplate(
            input_variables=["measurements"],
            template="""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –°–ê–ù (—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è.

            –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º):
            {measurements}
            
            –ó–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞:
            1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç—Ä–µ–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
            2. –û—Ü–µ–Ω–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            3. –í—ã—è–≤–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
            4. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥–∏–Ω–∞–º–∏–∫–µ
            5. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
            –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
            - –†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            - –£—Å—Ç–æ–π—á–∏–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã
            - –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            - –¶–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
            –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –æ–±—ä—è—Å–Ω—è–ª –¥–∏–Ω–∞–º–∏–∫—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –í—ã.
            –ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—Ä–∞–∑—É –∫ —Å—É—Ç–∏."""
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç GigaChat
        chain = LLMChain(
            llm=LangChainGigaChat(credentials=GIGACHAT_CREDENTIALS, verify_ssl_certs=False),
            prompt=prompt
        )

        analysis = await chain.arun({
            "measurements": "\n---\n".join(formatted_data)
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        await bot.send_message(
            chat_id=chat_id,
            text=f"–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –°–ê–ù –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n\n{analysis}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_reminder():
    try:
        async with aiosqlite.connect('users.db') as db:
            async with db.execute("SELECT user_id, name FROM users") as cursor:
                users = await cursor.fetchall()

        for user_id, name in users:
            try:
                async with aiosqlite.connect('survey.db') as db:
                    async with db.execute(
                            """SELECT timestamp 
                            FROM survey_results 
                            WHERE user_id = ? 
                            ORDER BY timestamp DESC 
                            LIMIT 1""",
                            (user_id,)
                    ) as cursor:
                        last_survey = await cursor.fetchone()

                if not last_survey:
                    message_text = f"{name}, –≤—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å –°–ê–ù. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å!"
                else:
                    message_text = f"{name}, –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –°–ê–ù!"

                await bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=main_menu
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_user_database()
    await init_db()
    await create_feedback_database()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware.register(RegistrationMiddleware())
    dp.message.middleware.register(LoggingMiddleware())

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder_interval = int(os.getenv('REMINDER_INTERVAL', '60'))
    scheduler.add_job(send_reminder, 'interval', minutes=reminder_interval)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await set_commands()
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        scheduler.shutdown()
